# https://github.com/realm/SwiftLint#defining-custom-rules
# https://infinum.com/handbook/resources/ios/swiftlint.yml
# https://infinum.com/handbook/books/ios/tools/swiftlint

# paths to ignore during linting. Takes precedence over `included`.
excluded:
  - Carthage
  - Pods
  - OvaryIQ/Utilities/Extensions
  - OvaryIQ/Helpers
  - OvaryIQ/Core
  
analyzer_rules:
  - unused_declaration
  - unused_import

opt_in_rules:
  - anyobject_protocol
  - array_init
  - attributes
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - contains_over_range_nil_comparison
  - discouraged_none_name
  - discouraged_object_literal
  - empty_collection_literal
  - empty_count
  - empty_string
  - empty_xctest_method
  - enum_case_associated_values_count
  - explicit_init
  - extension_access_modifier
  - fallthrough
  - fatal_error_message
  #- file_header
  - file_name
  - first_where
  - flatmap_over_map_reduce
  - identical_operands
  - joined_default_parameter
  - last_where
  - legacy_multiple
  - legacy_random
  - literal_expression_end_indentation
  - lower_acl_than_parent
  - modifier_order
  - nimble_operator
  - nslocalizedstring_key
  - number_separator
  #- object_literal
  - operator_usage_whitespace
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  - prefer_self_type_over_type_of_self
  - private_action
  #- private_outlet
  #- prohibited_interface_builder
  - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - reduce_into
  - redundant_nil_coalescing
  - redundant_type_annotation
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - static_operator
  #- strong_iboutlet
  - test_case_accessibility
  - toggle_bool
  - unavailable_function
  #- unneeded_parentheses_in_closure_argument
  - unowned_variable_capture
  - untyped_error_in_catch
  - vertical_parameter_alignment_on_call
  #- vertical_whitespace_closing_braces
  #- vertical_whitespace_opening_braces
  - xct_specific_matcher
  - yoda_condition

identifier_name:
  excluded:
    - id

line_length: 300

function_body_length:
  warning: 100
  error: 150

file_length:
  warning: 500
  error: 1500
  
number_separator:
  minimum_length: 5
  
custom_rules:
  rule_id:
    included: Source/SwiftLintFramework/Rules/.+/\w+\.swift
    name: Rule ID
    message: Rule IDs must be all lowercase, snake case and not end with `rule`
    regex: identifier:\s*("\w+_rule"|"\S*[^a-z_]\S*")
    severity: error

  fatal_error:
    name: Fatal Error
    excluded: "Tests/*"
    message: Prefer using `queuedFatalError` over `fatalError` to avoid leaking compiler host machine paths.
    regex: \bfatalError\b
    match_kinds:
      - identifier
    severity: error

  rule_test_function:
    included: Tests/SwiftLintFrameworkTests/RulesTests.swift
    name: Rule Test Function
    message: Rule Test Function mustn't end with `rule`
    regex: func\s*test\w+(r|R)ule\(\)
    severity: error

  class_semantics:
    included: ".*.swift"
    regex: '^(?!.*(final|abstract|recursive)).*class [A-Z]+.*\{'
    name: "Class Semantics Specification"
    message: "Specify the class semantics with either final, /* abstract */ or /* recursive */ keywords. Recursive means that class is used both itself & as a superclass."
    severity: warning

  closing_brace_whitespace:
    included: ".*.swift"
    regex: '(?:\n| {2,})\}\)? *\n *[^ \n\})\]]'
    name: "Closing Brace Whitespace"
    message: "Empty line required after closing curly braces if code with same indentation follows."
    severity: warning

  closure_params_parantheses:
    included: ".*.swift"
    regex: '\{\s*\([^):]+\)\s*in'
    name: "Unnecessary Closure Params Parantheses"
    message: "Don't use parantheses around non-typed parameters in a closure."
    severity: warning

  fabric_use:
    included: ".*\\.swift"
    excluded: "FabricManager\\.swift"
    regex: "import (Crashlytics|Fabric)"
    name: "Fabric Use"
    message: "Don't use Fabric directly. Use FabricManager instead."
    severity: warning

#  inline_comment_space:
#    included: ".*.swift"
#    regex: '[^\s(\/\/)]+([ ]{2,}|)(?<!:)\/\/'
#    name: "Inline comment space"
#    message: "An inline comment should always have one single leading whitespace."
#    severity: warning

#  if_as_guard:
#    included: ".*.swift"
#    regex: '\n *if [^\{]+\{\s*return\s*(?:nil){0,1}([^a-zA-z\n]*)\n*\s*\}(?! *else)'
#    name: "If as Guard"
#    message: "Don't use an if statement to just return – use guard for such cases instead."
#    severity: warning

#  late_force_unwrapping:
#    included: ".*.swift"
#    regex: '\(\S+\?\.\S+\)!'
#    name: "Late Force Unwrapping"
#    message: "Don't use ? first to force unwrap later – directly unwrap within the parantheses."
#    severity: warning

#  multiple_closure_params:
#    included: ".*.swift"
#    regex: '\n *(?:[^\.\n=]+\.)+[^\(\s]+\([^\{\n]+\{[^\}\n]+\}\)\s*\{'
#    name: "Multiple Closure Params"
#    message: "Don't use multiple in-line closures – save one or more of them to variables instead."
#    severity: warning

  none_case_enum:
    included: ".*.swift"
    regex: 'enum\s+[^\{]+\{(?:\s*\/\/[^\n]*)*(?:\s*case\s+[^\n]+)*\s*case\s+none[^\S]'
    name: "Non Case Enum"
    message: "Do not call enum cases `none` as you might run into problems with Optionals of this type."
    severity: warning

#  quick_temporary_disabling:
#    included: ".*.swift"
#    regex: '\sxdescribe\(|\sxcontext\(|\sxit\('
#    name: "Quick Temporary Disabling"
#    message: "Temporary disabled Quick examples or groups shouldn't be commited."
#    severity: warning

#  quick_temporary_focus:
#    included: ".*.swift"
#    regex: '\sfdescribe\(|\sfcontext\(|\sfit\('
#    name: "Quick Temporary Focus"
#    message: "Temporary focused Quick examples or groups shouldn't be commited."
#    severity: warning

#  single_line_enum_cases:
#    included: ".*.swift"
#    regex: 'enum [^\{]+\{\s*(?:\s*\/\/[^\n]*)*\s*case\s+[^,(\n]+,'
#    name: "Single Line Enum Cases"
#    message: "Use a new line for each enum case."
#    severity: warning

#  single_line_guard:
#    included: ".*.swift"
#    regex: 'guard[^\{]{2,80}else\s*\{\s*\n\s*return.{2,40}\}'
#    name: "Single Line Guard"
#    message: "Use a single line guard for simple checks."
#    severity: warning

#  too_much_indentation:
#    included: ".*.swift"
#    regex: '\n {0}[^\s\/][^\n]*[^,|&]\n+ {5,}\S|\n {4}[^\s\/][^\n]*[^,|&]\n+ {9,}\S|\n {8}[^\s\/][^\n]*[^,|&]\n+ {13,}\S|\n {12}[^\s\/][^\n]*[^,|&]\n+ {17,}\S|\n {16}[^\s\/][^\n]*[^,|&]\n+ {21,}\S|\n {20}[^\s\/][^\n]*[^,|&]\n+ {25,}\S'
#    name: "Too Much Indentation"
#    message: "Don't indent code by more than 4 whitespaces."
#    severity: warning

#  too_much_unindentation:
#    included: ".*.swift"
#    regex: ' {28}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,23}[^\s\/]| {24}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,19}[^\s\/]| {20}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,15}[^\s\/]| {16}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,11}[^\s\/]| {12}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,7}[^\s\/]| {8}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,3}[^\s\/]'
#    name: "Too Much Unindentation"
#    message: "Don't unindent code by more than 4 whitespaces."
#    severity: warning

  unnecessary_case_break:
    included: ".*.swift"
    regex: '(case |default)(?:[^\n\}]+\n){2,}\s*break *\n|\n *\n *break(?:\n *\n|\n *\})'
    name: "Unnecessary Case Break"
    message: "Don't use break in switch cases – Swift breaks by default."
    severity: warning

  unnecessary_nil_assignment:
    included: ".*.swift"
    regex: 'var \S+\s*:\s*[^\s]+\?\s*=\s*nil'
    name: "Unnecessary Nil Assignment"
    message: "Don't assign nil as a value when defining an optional type – it's nil by default."
    severity: warning

  vertical_whitespace_between_cases:
    included: ".*.swift"
    regex: '[^\n{][ \t]*\n[ \t]*(?:case[^\n]+|default):[ \t]*\n'
    name: "Vertical Whitespace Between Cases"
    message: "Include a vertical whitespace (empty line) between cases in switch statements."
    severity: warning

#  vertical_whitespaces_around_mark:
#    included: ".*.swift"
#    regex: '\/\/\s*MARK:[^\n]*(\n\n)|(\n\n\n)[ \t]*\/\/\s*MARK:|[^\s{]\n[^\n\/]*\/\/\s*MARK:'
#    name: "Vertical Whitespaces Around MARK:"
#    message: "Include a single vertical whitespace (empty line) before and none after MARK: comments."
#    severity: warning

#  vertical_whitespace_opening_braces:
#    included: ".*.swift"
#    regex: '[{(\[][ \t]*\n[ \t]*\n'
#    name: "Vertical Whitespace after Opening Braces"
#    message: "Don't include vertical whitespace (empty line) after opening braces."
#    severity: warning

#  vertical_whitespace_closing_braces:
#    included: ".*.swift"
#    regex: '\n[ \t]*\n[ \t]*[)}\]]'
#    name: "Vertical Whitespace before Closing Braces"
#    message: "Don't include vertical whitespace (empty line) before closing braces."
#    severity: warning
    
  whitespace_comment_start:
    included: ".*.swift"
    regex: '[^:#][^:#]\/\/[^\s\/]'
    name: "Whitespace Comment Start"
    message: "A comment should always start with a whitespace."
    severity: warning
